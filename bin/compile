#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
echo "GIT_DIR: $GIT_DIR"
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)


cd $BUILD_DIR
ls -la

ls -la .profile.d/

echo "BUILD_DIR: $BUILD_DIR"
echo "CACHE_DIR: $CACHE_DIR"
### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/environment.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Compile

create_env() {
  # write_profile "$BP_DIR" "$BUILD_DIR"
  # write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env "$BUILD_DIR"
  list_assets_config
  load_dependencies "$ASSETS_DEPS"

  echo PATH
  echo $PATH
  echo
}

header "Creating Asset environment"
create_env # can't indent the whole thing because piping causes subshells; no exporting possible
# list__config | indent

# restore_cache() {
#   echo 'create_signature': "$(create_signature)"
#   echo 'load_signature': "$(load_signature)"
#
#   local cache_status=$(get_cache_status)
#
#   if [ "$cache_status" == "disabled" ]; then
#     echo "Skipping (cache disabled)"
#     compile_assets
#   elif [ "$cache_status" == "invalidated" ]; then
#     echo "Skipping (cache invalidated)"
#     compile_assets
#   else
#     echo "Loading 1 from cacheDirectories (default):"
#     restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$ASSETS_CACHE_DIRECTORY"
#   fi
# }
#
# header "Restoring cache"
# restore_cache | indent
compile_assets

cache_build() {
  echo "Clearing previous assets cache"
  clear_cache
  echo "Saving 1 cacheDirectories (default):"
  save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$ASSETS_CACHE_DIRECTORY"
}

header "Caching build"
cache_build | indent

summarize_build() {
  cd $BUILD_DIR
  (ls -llh _public || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | indent
